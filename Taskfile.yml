version: "3"

vars:
  # Mandatory, otherwise the includes won't work.
  DEVENV: .devenv

env:
  DEVENV: .devenv
  CONFIG_DIR: "{{.DEVENV}}/settings"
  SCRIPTS_DIR: "{{.DEVENV}}/scripts"
  BUILD_DIR: "{{ .ROOT_DIR | toSlash }}/.build"

includes:
  aux: "{{.DEVENV}}/taskfiles/Taskfile.aux.yml"
  git: "{{.DEVENV}}/taskfiles/Taskfile.git.yml"
  lint: "{{.DEVENV}}/taskfiles/Taskfile.lint.yml"
  format: "{{.DEVENV}}/taskfiles/Taskfile.format.yml"
  go:
    taskfile: "{{.DEVENV}}/taskfiles/Taskfile.go.yml"
    vars:
      COVERAGE: 0.0%
      CONFIG_DIR: .
  github: "{{.DEVENV}}/taskfiles/Taskfile.github.yml"

silent: true

output: prefixed

tasks:
  docker:
    desc: Run commands inside the Docker container
    summary: |
      This task allows you to run commands inside the Docker container.
      Usage:
        - `task docker` to launch the container and enter its shell
        - `task docker -- task <task> -f` to run a task/command inside the container
    cmds:
      - docker rm -f devenv > /dev/null 2>&1 || true
      - docker compose -f {{.DEVENV}}/compose.yaml build --build-arg CACHEBUST=$(date +%s) devenv
      - docker compose -f {{.DEVENV}}/compose.yaml run --rm devenv {{.CLI_ARGS}}
    interactive: true

  push:
    desc: Push changes to the remote repository
    summary: |
      This task pushes changes to the remote repository.
      Usage:
        - `task push` for a default commit message
        - `task push -- "My commit message"` for a custom commit message
    cmds:
      - task: git
      - task: git:push

  clean:
    - task: aux:clean
    - task: go:clean
    - touch .bash_history
    - cmd: |
        rm -rf .bin-*

  info:
    - task: git

  generate:
    run: once
    cmds:
      - go generate ./...

  format:
    deps:
      - generate
      - task: format:yaml
      - task: format:json
      - task: format:docker
      - task: format:md
      - task: format:ws
    cmds:
      - task: go:format

  lint:
    deps:
      - generate
      - task: lint:ws
      - task: lint:yaml
      - task: lint:json
    cmds:
      - task: go:lint

  build:
    deps:
      - generate
    cmds:
      - task: go:build
      - task: go:release

  test:
    deps:
      - generate
    cmds:
      - task: go:quality

  all:
    desc: run all available tasks
    deps:
      - generate
    cmds:
      - task: clean
      - task: info
      - task: format
      - task: lint
      - task: build
      - task: test

  default:
    desc: clean, format & lint
    deps:
      - generate
    cmds:
      - task: info
      - task: format
      - task: lint

  update:
    - task: git:update

  release:
    dotenv:
      - tokens.env
    cmds:
      - |
        git config --global credential.helper '!f() { sleep 1; echo "username=git"; echo "password=${GITHUB_TOKEN}"; }; f'

        git tag -l | xargs git tag -d
        git fetch --tags

        # Check if the env var NO_BETA is set to true
        suffix=-beta
        if [ "${NO_BETA}" = "true" ]; then
          suffix=""
        fi

        latest=$(gh release list -L 1 --exclude-pre-releases --json tagName -q '.[0].tagName')
        next=$(go-next-tag $latest --bump=patch)${suffix}

        echo "next version: ${next}"

        git tag -d ${next} || true
        gh release delete ${next} --yes --cleanup-tag || true

        git tag -d ${next}-beta || true
        gh release delete ${next}-beta --yes --cleanup-tag || true

        git push origin :refs/tags/${next}

        git tag ${next}

        git push origin ${next}

        goreleaser release --skip=validate --clean --config ./.devenv/settings/.goreleaser.yaml

        rm -rf dist

  # docs:
  #   - |
  #     docker compose run --build jekyll jekyll build --source . --destination /tmp/_site
  #     touch /tmp/_site/.nojekyll
  #     git c

  docs:
    - |
      docker compose down --remove-orphans -v jekyll
      docker compose up --remove-orphans -d jekyll
      cmd /c "start chrome http://localhost:4000/godyl/"

  docker:build:
    - |
      docker buildx bake --set "*.platform=linux/arm64,linux/amd64" --push docker

  squash:
    - |
      git co
      git reset --soft $(git rev-list --max-parents=0 HEAD)
      git commit --amend -m "development branch"
      git push --force

  deadcode:
    cmds:
      - go install golang.org/x/tools/cmd/deadcode@latest
      - deadcode .

  dev:
    cmds:
      - |
        # Get the current branch name
        current_branch=$(git rev-parse --abbrev-ref HEAD)
        # Get the current commit hash
        current_commit=$(git rev-parse HEAD)
        docker compose build --build-arg GODYL_VERSION=${current_branch}:${current_commit} final
        docker compose push final

  gifs:
    cmds:
      - docker compose run --remove-orphans --build gifs
