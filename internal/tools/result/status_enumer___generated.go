// Code generated by "enumer -type=Status -output status_enumer___generated.go -transform=lower"; DO NOT EDIT.

package result

import (
	"fmt"
	"strings"
)

const _StatusName = "okskippedfailed"

var _StatusIndex = [...]uint8{0, 2, 9, 15}

const _StatusLowerName = "okskippedfailed"

func (i Status) String() string {
	if i < 0 || i >= Status(len(_StatusIndex)-1) {
		return fmt.Sprintf("Status(%d)", i)
	}
	return _StatusName[_StatusIndex[i]:_StatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _StatusNoOp() {
	var x [1]struct{}
	_ = x[OK-(0)]
	_ = x[Skipped-(1)]
	_ = x[Failed-(2)]
}

var _StatusValues = []Status{OK, Skipped, Failed}

var _StatusNameToValueMap = map[string]Status{
	_StatusName[0:2]:       OK,
	_StatusLowerName[0:2]:  OK,
	_StatusName[2:9]:       Skipped,
	_StatusLowerName[2:9]:  Skipped,
	_StatusName[9:15]:      Failed,
	_StatusLowerName[9:15]: Failed,
}

var _StatusNames = []string{
	_StatusName[0:2],
	_StatusName[2:9],
	_StatusName[9:15],
}

// StatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func StatusString(s string) (Status, error) {
	if val, ok := _StatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _StatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Status values", s)
}

// StatusValues returns all values of the enum
func StatusValues() []Status {
	return _StatusValues
}

// StatusStrings returns a slice of all String values of the enum
func StatusStrings() []string {
	strs := make([]string, len(_StatusNames))
	copy(strs, _StatusNames)
	return strs
}

// IsAStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Status) IsAStatus() bool {
	for _, v := range _StatusValues {
		if i == v {
			return true
		}
	}
	return false
}
