// Code generated by "enumer -type=Extension -output extension_enumer___generated.go"; DO NOT EDIT.

package file

import (
	"fmt"
	"strings"
)

const _ExtensionName = "NoneEXEGZZIPTAROther"

var _ExtensionIndex = [...]uint8{0, 4, 7, 9, 12, 15, 20}

const _ExtensionLowerName = "noneexegzziptarother"

func (i Extension) String() string {
	if i < 0 || i >= Extension(len(_ExtensionIndex)-1) {
		return fmt.Sprintf("Extension(%d)", i)
	}
	return _ExtensionName[_ExtensionIndex[i]:_ExtensionIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExtensionNoOp() {
	var x [1]struct{}
	_ = x[None-(0)]
	_ = x[EXE-(1)]
	_ = x[GZ-(2)]
	_ = x[ZIP-(3)]
	_ = x[TAR-(4)]
	_ = x[Other-(5)]
}

var _ExtensionValues = []Extension{None, EXE, GZ, ZIP, TAR, Other}

var _ExtensionNameToValueMap = map[string]Extension{
	_ExtensionName[0:4]:        None,
	_ExtensionLowerName[0:4]:   None,
	_ExtensionName[4:7]:        EXE,
	_ExtensionLowerName[4:7]:   EXE,
	_ExtensionName[7:9]:        GZ,
	_ExtensionLowerName[7:9]:   GZ,
	_ExtensionName[9:12]:       ZIP,
	_ExtensionLowerName[9:12]:  ZIP,
	_ExtensionName[12:15]:      TAR,
	_ExtensionLowerName[12:15]: TAR,
	_ExtensionName[15:20]:      Other,
	_ExtensionLowerName[15:20]: Other,
}

var _ExtensionNames = []string{
	_ExtensionName[0:4],
	_ExtensionName[4:7],
	_ExtensionName[7:9],
	_ExtensionName[9:12],
	_ExtensionName[12:15],
	_ExtensionName[15:20],
}

// ExtensionString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExtensionString(s string) (Extension, error) {
	if val, ok := _ExtensionNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExtensionNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Extension values", s)
}

// ExtensionValues returns all values of the enum
func ExtensionValues() []Extension {
	return _ExtensionValues
}

// ExtensionStrings returns a slice of all String values of the enum
func ExtensionStrings() []string {
	strs := make([]string, len(_ExtensionNames))
	copy(strs, _ExtensionNames)
	return strs
}

// IsAExtension returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Extension) IsAExtension() bool {
	for _, v := range _ExtensionValues {
		if i == v {
			return true
		}
	}
	return false
}
